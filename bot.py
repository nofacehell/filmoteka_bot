import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from config import BOT_TOKEN
from services import add_film_from_kinopoisk, get_random_film, get_all_films, search_films_kinopoisk, get_film_details_kinopoisk, mark_film_watched, delete_film, get_watched_films
from database import engine, Base
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º")],
        [KeyboardButton(text="üëÄ–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º"), KeyboardButton(text="üìã–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤")],
        [KeyboardButton(text="üßπ–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"), KeyboardButton(text="‚≠ê–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã")],
    ],
    resize_keyboard=True
)

class AddFilmStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_choice = State()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–ª—å–º–æ—Ç–µ–∫—É üé¨\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@dp.message(F.text == "‚úÖ–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º")
async def ask_film_title(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(AddFilmStates.waiting_for_title)

@dp.message(AddFilmStates.waiting_for_title)
async def show_film_choices(message: types.Message, state: FSMContext):
    films = await search_films_kinopoisk(message.text.strip())
    if not films:
        await message.answer("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{film['title']} ({film['year'] or '‚Äî'})", callback_data=f"choose_{film['kinopoiskId']}")]
            for film in films
        ] + [[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_add")]]
    )
    await state.update_data(films=films)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö:", reply_markup=kb)
    await state.set_state(AddFilmStates.waiting_for_choice)

@dp.callback_query(AddFilmStates.waiting_for_choice, F.data.startswith("choose_"))
async def show_film_details_for_add(callback: types.CallbackQuery, state: FSMContext):
    film_id = str(callback.data.split("_", 1)[1])
    film = await get_film_details_kinopoisk(film_id)
    if not film:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
    text = f"üé• <b>{film['title']}</b>\n–ì–æ–¥: {film['year'] or '‚Äî'}\n–ñ–∞–Ω—Ä: {film['genre'] or '‚Äî'}"
    if film['description']:
        text += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {film['description']}"
    if film['director']:
        text += f"\n–†–µ–∂–∏—Å—Å–µ—Ä: {film['director']}"
    if film['actors']:
        text += f"\n–ê–∫—Ç–µ—Ä—ã: {film['actors']}"
    if film['country']:
        text += f"\n–°—Ç—Ä–∞–Ω–∞: {film['country']}"
    if film['rating']:
        text += f"\n–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {film['rating']}"
    if film['trailer_url']:
        text += f"\n<a href='{film['trailer_url']}'>–¢—Ä–µ–π–ª–µ—Ä</a>"
    if film['poster_url']:
        text += f"\n<a href='{film['poster_url']}'>–ü–æ—Å—Ç–µ—Ä</a>"
    if film.get('watch_url'):
        text += f"\n<a href='{film['watch_url']}'>–°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω</a>"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å–º", callback_data=f"add_{film_id}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_add")]
        ]
    )
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb, disable_web_page_preview=True)
    await state.update_data(selected_film=film)

@dp.callback_query(AddFilmStates.waiting_for_choice, F.data.startswith("add_"))
async def confirm_add_film(callback: types.CallbackQuery, state: FSMContext):
    film_id = int(callback.data.split("_", 1)[1])
    data = await state.get_data()
    film = data.get("selected_film")
    if not film or film["kinopoiskId"] != film_id:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.", show_alert=True)
        return
    await add_film_from_kinopoisk(film)
    await callback.message.edit_text("–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!", reply_markup=None)
    await state.clear()

@dp.callback_query(AddFilmStates.waiting_for_choice, F.data == "back_to_list")
async def back_to_list(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    films = data.get("films", [])
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{film['title']} ({film['year'] or '‚Äî'})", callback_data=f"choose_{film['kinopoiskId']}")]
            for film in films
        ] + [[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_add")]]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö:", reply_markup=kb)

@dp.callback_query(AddFilmStates.waiting_for_choice, F.data == "cancel_add")
async def cancel_add_film(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    await state.clear()

@dp.message(F.text == "üëÄ–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º")
async def cmd_random(message: types.Message):
    film = await get_random_film()
    if film:
        text = f"üé• <b>{film.title}</b>\n–ì–æ–¥: {film.year or '‚Äî'}\n–ñ–∞–Ω—Ä: {film.genre or '‚Äî'}"
        if film.description:
            text += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {film.description}"
        if film.trailer_url:
            text += f"\n<a href='{film.trailer_url}'>–¢—Ä–µ–π–ª–µ—Ä</a>"
        await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)
    else:
        await message.answer("–§–∏–ª—å–º–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞.")

@dp.message(F.text == "üìã–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤")
async def cmd_list(message: types.Message):
    films = await get_all_films()
    if not films:
        return await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {film.title}", callback_data=f"details_{film.id}")]
            for film in films
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:", reply_markup=kb)

@dp.callback_query(F.data.startswith("details_"))
async def show_film_details(callback: types.CallbackQuery):
    film_id = int(callback.data.split("_", 1)[1])
    films = await get_all_films()
    film = next((f for f in films if f.id == film_id), None)
    if film:
        text = f"üé• <b>{film.title}</b>\n–ì–æ–¥: {film.year or '‚Äî'}\n–ñ–∞–Ω—Ä: {film.genre or '‚Äî'}"
        if film.description:
            text += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {film.description}"
        if film.director:
            text += f"\n–†–µ–∂–∏—Å—Å–µ—Ä: {film.director}"
        if film.actors:
            text += f"\n–ê–∫—Ç–µ—Ä—ã: {film.actors}"
        if film.country:
            text += f"\n–°—Ç—Ä–∞–Ω–∞: {film.country}"
        if film.rating:
            text += f"\n–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {film.rating}"
        if film.trailer_url:
            text += f"\n<a href='{film.trailer_url}'>–¢—Ä–µ–π–ª–µ—Ä</a>"
        if film.poster_url:
            text += f"\n<a href='{film.poster_url}'>–ü–æ—Å—Ç–µ—Ä</a>"
        if film.watch_url:
            text += f"\n<a href='{film.watch_url}'>–°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω</a>"
        watched_text = "‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ" if film.watched else "‚ùå –ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"
        text += f"\n{watched_text}"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{film.id}"),
                 InlineKeyboardButton(text="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π", callback_data=f"watched_{film.id}")]
            ]
        )
        await callback.message.answer(text, parse_mode="HTML", reply_markup=kb, disable_web_page_preview=True)
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_"))
async def delete_film_callback(callback: types.CallbackQuery):
    film_id = int(callback.data.split("_", 1)[1])
    await delete_film(film_id)
    await callback.message.edit_text("–§–∏–ª—å–º —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
    await callback.answer()

@dp.callback_query(F.data.startswith("watched_"))
async def watched_film_callback(callback: types.CallbackQuery):
    film_id = int(callback.data.split("_", 1)[1])
    await mark_film_watched(film_id)
    await callback.message.edit_text("–§–∏–ª—å–º –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π!")
    await callback.answer()

@dp.message(F.text == "‚≠ê–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã")
async def watched_list(message: types.Message):
    films = await get_watched_films()
    if not films:
        return await message.answer("–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç.")
    text = "\n".join([f"‚Ä¢ {film.title} ({film.year or '‚Äî'})" for film in films])
    await message.answer("‚≠ê –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:\n" + text)

@dp.message(F.text == "üßπ–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
async def clear_chat(message: types.Message):
    await message.answer("–ß–∞—Ç –æ—á–∏—â–µ–Ω! (–£–¥–∞–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)")

@dp.message()
async def handle_text(message: types.Message):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ—Å–ª–µ "–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º"
    if message.reply_to_message and message.reply_to_message.text.startswith("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞"):
        title = message.text.strip()
        await add_film_from_kinopoisk(title)
        film = await search_films_kinopoisk(title)
        if film:
            text = f"üé• <b>{film['title']}</b>\n–ì–æ–¥: {film['year'] or '‚Äî'}\n–ñ–∞–Ω—Ä: {film['genre'] or '‚Äî'}"
            if film['description']:
                text += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {film['description']}"
            if film['trailer_url']:
                text += f"\n<a href='{film['trailer_url']}'>–¢—Ä–µ–π–ª–µ—Ä</a>"
            await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)
        else:
            await message.answer("–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.", reply_markup=main_kb)

async def main():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 