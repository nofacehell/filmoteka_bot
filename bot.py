import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from config import BOT_TOKEN
from services import add_film_from_kinopoisk, get_random_film, get_all_films, search_films_kinopoisk, get_film_details_kinopoisk, mark_film_watched, delete_film, get_watched_films
from database import engine, Base
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É—á—ë—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è
def get_main_kb(profile):
    if profile == "–ï–≤–≥–µ—à–∞":
        other = "–í–∞–Ω–¥—Ä–æ–Ω–æ–≤–∏—á"
    else:
        other = "–ï–≤–≥–µ—à–∞"
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º")],
            [KeyboardButton(text="‚≠ê –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö"), KeyboardButton(text="üìã–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤")],
            [KeyboardButton(text=f"üìÇ –§–∏–ª—å–º—ã {other}")],
            [KeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")],
        ],
        resize_keyboard=True
    )

class AddFilmStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_choice = State()

class UserStates(StatesGroup):
    choosing_user = State()
    user_selected = State()

class RateCommentStates(StatesGroup):
    waiting_for_rating = State()
    waiting_for_comment = State()

user_list = ["–ï–≤–≥–µ—à–∞", "–í–∞–Ω–¥—Ä–æ–Ω–æ–≤–∏—á"]

def ensure_profile(func):
    async def wrapper(*args, **kwargs):
        state = kwargs.get("state")
        message = kwargs.get("message")
        callback = kwargs.get("callback")
        event = kwargs.get("event")

        # aiogram –æ–±—ã—á–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç message/callback –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, state ‚Äî –≤—Ç–æ—Ä–æ–π
        if state is None and len(args) > 1:
            state = args[1]
        if message is None and callback is None:
            if len(args) > 0:
                if hasattr(args[0], "text"):  # message
                    message = args[0]
                elif hasattr(args[0], "data"):  # callback_query
                    callback = args[0]
                elif hasattr(args[0], "message"):  # event
                    event = args[0]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        if state is not None:
            data = await state.get_data()
            if not data.get("profile"):
                if message:
                    await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /start.")
                elif callback:
                    await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /start.")
                elif event:
                    await event.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /start.")
                await state.set_state(UserStates.choosing_user)
                return
        return await func(*args, **kwargs)
    return wrapper

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=name)] for name in user_list],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb)
    await state.set_state(UserStates.choosing_user)

@dp.message(UserStates.choosing_user)
async def choose_user(message: types.Message, state: FSMContext):
    if message.text not in user_list:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(profile=message.text)
    await state.set_state(UserStates.user_selected)
    await message.answer(f"–ü—Ä–æ—Ñ–∏–ª—å {message.text} –≤—ã–±—Ä–∞–Ω!", reply_markup=get_main_kb(message.text))

@dp.message(StateFilter(UserStates.user_selected), F.text == "‚úÖ–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º")
@ensure_profile
async def ask_film_title(message: types.Message, state: FSMContext, **kwargs):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(AddFilmStates.waiting_for_title)

@dp.message(AddFilmStates.waiting_for_title)
async def show_film_choices(message: types.Message, state: FSMContext):
    films = await search_films_kinopoisk(message.text.strip())
    if not films:
        await message.answer("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{film['title']} ({film['year'] or '‚Äî'})", callback_data=f"choose_{film['kinopoiskId']}")]
            for film in films
        ] + [[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_add")]]
    )
    await state.update_data(films=films)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö:", reply_markup=kb)
    await state.set_state(AddFilmStates.waiting_for_choice)

@dp.callback_query(AddFilmStates.waiting_for_choice, F.data.startswith("choose_"))
async def show_film_details_for_add(callback: types.CallbackQuery, state: FSMContext):
    film_id = str(callback.data.split("_", 1)[1])
    film = await get_film_details_kinopoisk(film_id)
    if not film:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
    text = f"üé• <b>{film['title']}</b>\n–ì–æ–¥: {film['year'] or '‚Äî'}\n–ñ–∞–Ω—Ä: {film['genre'] or '‚Äî'}"
    if film['description']:
        text += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {film['description']}"
    if film['director']:
        text += f"\n–†–µ–∂–∏—Å—Å–µ—Ä: {film['director']}"
    if film['actors']:
        text += f"\n–ê–∫—Ç–µ—Ä—ã: {film['actors']}"
    if film['country']:
        text += f"\n–°—Ç—Ä–∞–Ω–∞: {film['country']}"
    if film['rating']:
        text += f"\n–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {film['rating']}"
    if film['trailer_url']:
        text += f"\n<a href='{film['trailer_url']}'>–¢—Ä–µ–π–ª–µ—Ä</a>"
    if film['poster_url']:
        text += f"\n<a href='{film['poster_url']}'>–ü–æ—Å—Ç–µ—Ä</a>"
    if film.get('watch_url'):
        text += f"\n<a href='{film['watch_url']}'>–°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω</a>"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å–º", callback_data=f"add_{film_id}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_add")]
        ]
    )
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb, disable_web_page_preview=True)
    await state.update_data(selected_film=film)

@dp.callback_query(AddFilmStates.waiting_for_choice, F.data.startswith("add_"))
async def confirm_add_film(callback: types.CallbackQuery, state: FSMContext):
    film_id = int(callback.data.split("_", 1)[1])
    data = await state.get_data()
    film = data.get("selected_film")
    profile = data.get("profile")
    if not film or film["kinopoiskId"] != film_id:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.", show_alert=True)
        return
    await add_film_from_kinopoisk(film, profile)
    await callback.message.edit_text("–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!", reply_markup=None)
    await state.clear()
    await state.set_state(UserStates.user_selected)
    await state.update_data(profile=profile)

@dp.callback_query(AddFilmStates.waiting_for_choice, F.data == "back_to_list")
async def back_to_list(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    films = data.get("films", [])
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{film['title']} ({film['year'] or '‚Äî'})", callback_data=f"choose_{film['kinopoiskId']}")]
            for film in films
        ] + [[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_add")]]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö:", reply_markup=kb)

@dp.callback_query(AddFilmStates.waiting_for_choice, F.data == "cancel_add")
async def cancel_add_film(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    await state.set_state(UserStates.user_selected)
    await state.update_data(selected_film=None)

@dp.message(StateFilter(UserStates.user_selected), F.text == "‚≠ê –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö")
@ensure_profile
async def watched_list(message: types.Message, state: FSMContext, **kwargs):
    data = await state.get_data()
    profile = data.get("profile")
    films = await get_watched_films(profile)
    if not films:
        return await message.answer("–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç.")
    text = "\n".join([f"‚Ä¢ {film.title} ({film.year or '‚Äî'})" for film in films])
    await message.answer("‚≠ê –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:\n" + text)

@dp.message(StateFilter(UserStates.user_selected), F.text == "üìã–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤")
@ensure_profile
async def cmd_list(message: types.Message, state: FSMContext, **kwargs):
    data = await state.get_data()
    profile = data.get("profile")
    films = await get_all_films(profile)
    if not films:
        return await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {film.title}", callback_data=f"details_{film.id}")]
            for film in films
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:", reply_markup=kb)

@dp.callback_query(StateFilter(UserStates.user_selected), F.data.startswith("details_"))
@ensure_profile
async def show_film_details(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    data = await state.get_data()
    profile = data.get("profile")
    films = await get_all_films(profile)
    film_id = int(callback.data.split("_", 1)[1])
    film = next((f for f in films if f.id == film_id), None)
    if film:
        text = f"üé• <b>{film.title}</b>\n–ì–æ–¥: {film.year or '‚Äî'}\n–ñ–∞–Ω—Ä: {film.genre or '‚Äî'}"
        if film.description:
            text += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {film.description}"
        if film.director:
            text += f"\n–†–µ–∂–∏—Å—Å–µ—Ä: {film.director}"
        if film.actors:
            text += f"\n–ê–∫—Ç–µ—Ä—ã: {film.actors}"
        if film.country:
            text += f"\n–°—Ç—Ä–∞–Ω–∞: {film.country}"
        if film.rating:
            text += f"\n–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {film.rating}"
        if film.trailer_url:
            text += f"\n<a href='{film.trailer_url}'>–¢—Ä–µ–π–ª–µ—Ä</a>"
        if film.poster_url:
            text += f"\n<a href='{film.poster_url}'>–ü–æ—Å—Ç–µ—Ä</a>"
        if film.watch_url:
            text += f"\n<a href='{film.watch_url}'>–°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω</a>"
        watched_text = "‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ" if film.watched else "‚ùå –ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"
        text += f"\n{watched_text}"
        if film.rating_user:
            text += f"\n–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {film.rating_user}/10"
        if film.comment_user:
            text += f"\n–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {film.comment_user}"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=f"rate_{film.id}"),
                 InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_{film.id}")],
                [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{film.id}"),
                 InlineKeyboardButton(text="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π", callback_data=f"watched_{film.id}")]
            ]
        )
        await callback.message.answer(text, parse_mode="HTML", reply_markup=kb, disable_web_page_preview=True)
    await callback.answer()

@dp.callback_query(StateFilter(UserStates.user_selected), F.data.startswith("delete_"))
async def delete_film_callback(callback: types.CallbackQuery):
    film_id = int(callback.data.split("_", 1)[1])
    await delete_film(film_id)
    await callback.message.edit_text("–§–∏–ª—å–º —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
    await callback.answer()

@dp.callback_query(StateFilter(UserStates.user_selected), F.data.startswith("watched_"))
async def watched_film_callback(callback: types.CallbackQuery):
    film_id = int(callback.data.split("_", 1)[1])
    await mark_film_watched(film_id)
    await callback.message.edit_text("–§–∏–ª—å–º –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π!")
    await callback.answer()

@dp.callback_query(StateFilter(UserStates.user_selected), F.data.startswith("rate_"))
@ensure_profile
async def rate_film(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    film_id = int(callback.data.split("_", 1)[1])
    await state.update_data(rate_film_id=film_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É —Ñ–∏–ª—å–º—É (1-10):")
    await state.set_state(RateCommentStates.waiting_for_rating)
    await callback.answer()

@dp.message(RateCommentStates.waiting_for_rating)
async def save_rating(message: types.Message, state: FSMContext):
    try:
        rating = int(message.text.strip())
        if not (1 <= rating <= 10):
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return
    data = await state.get_data()
    film_id = data.get("rate_film_id")
    profile = data.get("profile")
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑–µ
    from services import SessionLocal, Film
    async with SessionLocal() as session:
        film = await session.get(Film, film_id)
        if film and film.profile == profile:
            film.rating_user = rating
            await session.commit()
    await message.answer(f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ {rating}/10 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    await state.set_state(UserStates.user_selected)

@dp.callback_query(StateFilter(UserStates.user_selected), F.data.startswith("comment_"))
@ensure_profile
async def comment_film(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    film_id = int(callback.data.split("_", 1)[1])
    await state.update_data(comment_film_id=film_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∏–ª—å–º—É (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(RateCommentStates.waiting_for_comment)
    await callback.answer()

@dp.message(RateCommentStates.waiting_for_comment)
async def save_comment(message: types.Message, state: FSMContext):
    comment = message.text.strip()
    if len(comment) > 500:
        await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    data = await state.get_data()
    film_id = data.get("comment_film_id")
    profile = data.get("profile")
    from services import SessionLocal, Film
    async with SessionLocal() as session:
        film = await session.get(Film, film_id)
        if film and film.profile == profile:
            film.comment_user = comment
            await session.commit()
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    await state.set_state(UserStates.user_selected)

@dp.message(StateFilter(UserStates.user_selected), F.text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
@ensure_profile
async def restart_bot(message: types.Message, state: FSMContext, **kwargs):
    await message.answer("–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤—Ä—É—á–Ω—É—é (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ supervisor/systemd, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ).")
    # –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):
    # import os; os._exit(0)

@dp.message(StateFilter(UserStates.user_selected), F.text.regexp(r"^üìÇ –§–∏–ª—å–º—ã "))
@ensure_profile
async def other_user_films(message: types.Message, state: FSMContext, **kwargs):
    data = await state.get_data()
    profile = data.get("profile")
    other = "–í–∞–Ω–¥—Ä–æ–Ω–æ–≤–∏—á" if profile == "–ï–≤–≥–µ—à–∞" else "–ï–≤–≥–µ—à–∞"
    films = await get_all_films(other)
    if not films:
        return await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {other} –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤.")
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {film.title}", callback_data=f"otherdetails_{film.id}")]
            for film in films
        ]
    )
    await message.answer(f"–§–∏–ª—å–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {other}:", reply_markup=kb)

@dp.callback_query(StateFilter(UserStates.user_selected), F.data.startswith("otherdetails_"))
@ensure_profile
async def show_other_film_details(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    data = await state.get_data()
    profile = data.get("profile")
    other = "–í–∞–Ω–¥—Ä–æ–Ω–æ–≤–∏—á" if profile == "–ï–≤–≥–µ—à–∞" else "–ï–≤–≥–µ—à–∞"
    films = await get_all_films(other)
    film_id = int(callback.data.split("_", 1)[1])
    film = next((f for f in films if f.id == film_id), None)
    if film:
        text = f"üé• <b>{film.title}</b>\n–ì–æ–¥: {film.year or '‚Äî'}\n–ñ–∞–Ω—Ä: {film.genre or '‚Äî'}"
        if film.description:
            text += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {film.description}"
        if film.director:
            text += f"\n–†–µ–∂–∏—Å—Å–µ—Ä: {film.director}"
        if film.actors:
            text += f"\n–ê–∫—Ç–µ—Ä—ã: {film.actors}"
        if film.country:
            text += f"\n–°—Ç—Ä–∞–Ω–∞: {film.country}"
        if film.rating:
            text += f"\n–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {film.rating}"
        if film.trailer_url:
            text += f"\n<a href='{film.trailer_url}'>–¢—Ä–µ–π–ª–µ—Ä</a>"
        if film.poster_url:
            text += f"\n<a href='{film.poster_url}'>–ü–æ—Å—Ç–µ—Ä</a>"
        if film.watch_url:
            text += f"\n<a href='{film.watch_url}'>–°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω</a>"
        watched_text = "‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ" if film.watched else "‚ùå –ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"
        text += f"\n{watched_text}"
        if film.rating_user:
            text += f"\n–û—Ü–µ–Ω–∫–∞: {film.rating_user}/10"
        if film.comment_user:
            text += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {film.comment_user}"
        await callback.message.answer(text, parse_mode="HTML", disable_web_page_preview=True)
    await callback.answer()

@dp.message()
async def handle_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if data.get("profile"):
        await state.set_state(UserStates.user_selected)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.", reply_markup=get_main_kb(data.get("profile")))
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /start.")

async def main():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 